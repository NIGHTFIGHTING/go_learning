1.thread和kernel entity是1:1，由系统直接调用。系统线程由cpu直接调度。调度效率搞，线程上下文切换存在内核对象切换   
多个线程都和系统对应，切换小很多
2.M:kenel entity系统线程
P:Processor go语言协程处理器
G:协程
3.processor在不同的系统线程里，每个processor挂着一个准备运行的协程队列
如果一个协程运行时间特别长，把某一个processor都站住了，其他在队列里面的协程
会等待很久？
在go启动时候，一个守护线程做计数，记录每一个processor完成协程的数量。
当一段时间某一个processor完成协程数量没有发生变化的时候，向协程任务栈插入特殊标记
当协程运行遇到非内连函数时候，读到这个标记，把自己中断下来，插入到队列队尾
4.
当某一个协程被系统中断，比如等待io，为了提高整体并发，processor把自己移动到另一个
可运行的系统线程中，继续执行协程队列中其他的协程。当被中断协程唤醒完成后，假如到某一个
协程等待队列，或者全局等待队列。
当协程被中断，在寄存器当运行状态被保存在协程对象里，当协程再次获得运行机会，再次写入寄存器

27.
当receiver不知道producer放多少数据，receiver如何知道数据放完？
1.特殊token可以告诉什么时候producer数据产生完成，比如-1代表数据放完了。 receiver收到
-1，退出，代表数据接受完成。 尤其在多个receiver情况，producer需要
知道现在有几个receiver，放入几个-1
两个矛盾
如果不放入token，receiver需要知道producer产生多少数据，什么时候数据产生 完
尤其在多个receiver情况,receiver在调度的情况下，receiver不清楚自己可以处理几个数据，
这个方案只能是在一个receiver情况下可行
即便放入一个标志,在多个receiver情况下，produce需要确切知道现在receiver个数，
因为每个receiver都需要收到一个结束标志 ，这样写程序耦合度很高
2.如果token方案可行，producer需要知道确切receiver个数,因为每个receiver都需要收到一个
结束标志。程序耦合度高

1.Golang从入门到精通:讲师:少林之巅
https://study.163.com/course/introduction.htm?courseId=1004720008&share=1&shareId=1396904690#/courseDetail?tab=1
https://www.bilibili.com/video/av83350913?p=3
2.慕课网:Go语言从入门到达人之路
https://coding.imooc.com/learningpath/route?pathId=5
3.全流程开发 GO实战电商网站高并发秒杀系统
天翼云盘链接:
https://cloud.189.cn/t/YBZF7bRNBVJj（访问码：0579）
百度云有压缩包版本
4.高并发&高性能 Go语言开发企业级抽奖项目 百度云
https://coding.imooc.com/class/chapter/295.html#Anchor
http://www.52studyit.com/

限流，降级，dconnectpool连接池，线程池，事物，CAP，负载均衡
服务qps计算(metric)
1.查看某台服务器的qps，比如rpc框架中可以提供，访问一个url可以看到这台机器的cpu，内存，以及服务qps
2.普罗尼修斯请求server,server需要提供接口
，大数据排序
1.每天一道leetcode
(1)leetcode-热题100道
(2)leetcode-剑指,leetcode题解
(3)跟进:力扣每日1题打卡群
如何刷leetcode:https://www.zhihu.com/question/280279208/answer/1113386297
如果不懂的题目:看一下花花酱的视频，或者labuladong的算法小抄题解,或者cyc2018的题解
二分法：https://leetcode-cn.com/problems/search-insert-position/solution/te-bie-hao-yong-de-er-fen-cha-fa-fa-mo-ban-python-/
回溯法：https://leetcode-cn.com/problems/n-queens/solution/hui-su-suan-fa-xiang-jie-by-labuladong/
从全排列到回溯法：https://leetcode-cn.com/problems/permutations/solution/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liweiw/
BFS框架：https://mp.weixin.qq.com/s/WH_XGm1-w5882PnenymZ7g
       https://leetcode-cn.com/problems/word-ladder/solution/yan-du-you-xian-bian-li-shuang-xiang-yan-du-you-2/
       https://leetcode-cn.com/problems/word-ladder-ii/
       https://leetcode-cn.com/problems/word-ladder/
       https://leetcode-cn.com/problems/word-search/solution/zai-er-wei-ping-mian-shang-shi-yong-hui-su-fa-pyth/
摔杯子：https://mp.weixin.qq.com/s?__biz=MzUyNjQxNjYyMg==&mid=2247484557&idx=1&sn=739d80488fe1169a9c9ca26ecfcdfba6&chksm=fa0e6b0ccd79e21a1c2b0d99db69f6206cddddfe2367742e9de1d7d17ec35a5ce29fa4e30d63&token=110841213&lang=zh_CN#rd
数组前缀和:https://leetcode-cn.com/problems/subarray-sum-equals-k/solution/bao-li-jie-fa-qian-zhui-he-qian-zhui-he-you-hua-ja/
拓扑排序: https://leetcode-cn.com/problems/course-schedule/solution/tuo-bu-pai-xu-by-liweiwei1419/
dp动态规划: https://leetcode-cn.com/problems/maximum-product-subarray/solution/dong-tai-gui-hua-li-jie-wu-hou-xiao-xing-by-liweiw/
滑动窗口: https://leetcode-cn.com/problems/minimum-window-substring/solution/hua-dong-chuang-kou-suan-fa-tong-yong-si-xiang-by-/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7.md
股票问题: https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/solution/yi-ge-tong-yong-fang-fa-tuan-mie-6-dao-gu-piao-wen/
使用二分法查找一个有范围的整数: https://leetcode-cn.com/problems/find-the-duplicate-number/solution/er-fen-fa-si-lu-ji-dai-ma-python-by-liweiwei1419/
单调栈：https://leetcode-cn.com/problems/largest-rectangle-in-histogram/solution/bao-li-jie-fa-zhan-by-liweiwei1419/
并查集：https://leetcode-cn.com/problems/satisfiability-of-equality-equations/

2.go少林之巅的课程完成,之后学习阿甘的spring视频
3.《redis实战》书籍
4.mysql
5.面试题目
微信面试：https://www.jianshu.com/p/781ffd8e42da
https://github.com/CyC2018/CS-Notes
6.系统设计题目:
https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md
7.广告书籍，搜索推荐
搜索引擎-原理、技术与系统:https://book.douban.com/subject/1481158/
搜索引擎:https://book.douban.com/subject/4861766/
深入搜索引擎:https://book.douban.com/subject/3729518/
自制搜索引擎:https://www.ituring.com.cn/book/1582
计算广告:https://book.douban.com/subject/34804492/
ElasticSearch,Redis使用,用户数据的存储,以及多维度的个性化展示
Redis实战书中有<1.基于redis构建广告,搜索的服务，2.twitter服务器>
8.
书籍推荐:https://www.zhihu.com/people/yangsoon
《深入理解计算机系统》、《现代操作系统》
<<高性能mysql>>
<<mysql技术内幕>>
<<Redis 深度历险：核心原理与应用实践>>
<<数据密集型应用系统设计>>
《操作系统导论》https://zhuanlan.zhihu.com/p/49286109
<<分布式系统概念与设计>>
《算法：C语言实现》第1～4部分https://book.douban.com/subject/4065258/
<<数据结构与算法分析>> https://book.douban.com/subject/1139426/
